define("local_stoodle/quiz",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.init=void 0;_exports.init=()=>{const questionSet=JSON.parse(document.getElementById("question-set").innerHTML),answerSet=JSON.parse(document.getElementById("answer-set").innerHTML),questionDiv=document.querySelector(".js-answer-area"),scoreArea=document.querySelector(".score"),totalQuestions=Object.values(questionSet).length,newSet=function(qSet,oSet){let resultSet=new Map;for(const qKey in Object.values(qSet)){let optionArray=[],answerArray=[];for(const oKey in Object.values(oSet))Object.values(qSet)[qKey].question_number===Object.values(oSet)[oKey].stoodle_quiz_questionsid&&(optionArray.push(Object.values(oSet)[oKey].option_text),1===parseInt(Object.values(oSet)[oKey].is_correct)&&answerArray.push(Object.values(oSet)[oKey].option_text));resultSet.set(Object.values(qSet)[qKey].question_text,[optionArray,answerArray])}return resultSet}(questionSet,answerSet),typeSet=function(questions,options){const questionTypesArray=new Array(Object.values(questions).length);for(const questionKey in Object.values(questions)){const questionId=parseInt(Object.values(questions)[questionKey].id);let count=0;for(const answerKey in Object.values(options)){const answerObject=Object.values(options)[answerKey];parseInt(answerObject.stoodle_quiz_questionsid)===questionId&&1===parseInt(answerObject.is_correct)&&count++}count>1?questionTypesArray[questionKey]=2:1===count&&1===parseInt(Object.values(questions)[questionKey].is_multiple_choice)?questionTypesArray[questionKey]=1:questionTypesArray[questionKey]=0}return questionTypesArray}(questionSet,answerSet);window.console.log(questionSet),window.console.log(answerSet),window.console.log([...newSet.entries()]),window.console.log(typeSet),window.console.log(newSet.get("q1")[0][0]),scoreArea.innerHTML="Score: 0 / "+totalQuestions,document.querySelector(".submit-button").addEventListener("click",(()=>{!function(){let numCorrect=0;const correctHex="✅",incorrectHex="❌";for(const key in Object.values(questionSet)){const dbQuestionText=Object.values(questionSet)[key].question_text,htmlQuestionText="Question "+(parseInt(key)+1)+": "+dbQuestionText;if(0===typeSet[key]){const option=document.getElementById("option_"+key);if(null===option)return void alert("Question "+(parseInt(key)+1)+" is unanswered");const parent=option.parentElement.parentElement.children[0];option.value===newSet.get(dbQuestionText)[1][0]?(window.console.log("Question "+(parseInt(key)+1)+" is correct"),numCorrect++,parent.innerText=htmlQuestionText+" "+correctHex):(parent.innerText=htmlQuestionText+" "+incorrectHex+" (manual review required)",window.console.log("open response wrong what"))}else if(1===typeSet[key]){const option=document.querySelector('input[name = "'+key+'"]:checked');if(null===option)return void alert("Question "+(parseInt(key)+1)+" is unanswered");const parent=option.parentElement.parentElement.children[0];newSet.get(dbQuestionText)[1][0]===option.value?(window.console.log("Question "+(parseInt(key)+1)+" is correct"),numCorrect++,parent.innerText=htmlQuestionText+" "+correctHex):(window.console.log("multiple choice wrong what"),parent.innerText=htmlQuestionText+" "+incorrectHex)}else if(2===typeSet[key]){const option=document.querySelectorAll('input[name="'+key+'"]:checked');if(option.length<1)return void alert("Question "+(parseInt(key)+1)+" is unanswered");const parent=document.querySelector('input[name="'+key+'"]:checked').parentElement.parentElement.children[0];let selectAllCorrectCounter=0;if(window.console.log(option),newSet.get(dbQuestionText)[1].length!==option.length){parent.innerText=htmlQuestionText+" "+incorrectHex;continue}for(let i=0;i<newSet.get(dbQuestionText)[1].length;i++)newSet.get(dbQuestionText)[0][i]===option[i].value?selectAllCorrectCounter++:window.console.log("select all wrong what");selectAllCorrectCounter===newSet.get(dbQuestionText)[1].length?(numCorrect++,window.console.log("Question "+(parseInt(key)+1)+" is correct"),parent.innerText=htmlQuestionText+" "+correctHex):parent.innerText=htmlQuestionText+" "+incorrectHex}}scoreArea.innerText="Score: "+numCorrect+" / "+totalQuestions}()}));for(const key in Object.values(questionSet)){const newDiv=document.createElement("div");newDiv.id="stoodle-div";const questionText=document.createElement("p");switch(questionText.id="stoodle-question-text",questionText.textContent="Question "+(parseInt(key)+1)+": "+Object.values(questionSet)[key].question_text,newDiv.appendChild(questionText),typeSet[key]){default:case 0:newDiv.id="open-response",createOpenResponseQuestion(newDiv,"option_"+key);break;case 1:newDiv.id="multiple-choice";for(const element in newSet.get(Object.values(questionSet)[key].question_text)[0]){createInputNodeRadio(newDiv,"option_"+key,key,newSet.get(Object.values(questionSet)[key].question_text)[0][element])}break;case 2:newDiv.id="select-all";for(const element in newSet.get(Object.values(questionSet)[key].question_text)[0]){createInputNodeCheckBox(newDiv,"option_"+key,key,newSet.get(Object.values(questionSet)[key].question_text)[0][element])}}questionDiv.appendChild(newDiv)}function createOpenResponseQuestion(parent,name){const label=document.createElement("label"),textInput=document.createElement("textarea");textInput.id=name,textInput.cols=100,label.appendChild(textInput),parent.appendChild(label)}function createInputNodeRadio(parent,id,name,value){const radio=document.createElement("input");radio.type="radio",radio.id=id,radio.name=name,radio.value=value;const label=document.createElement("label");label.appendChild(radio),label.appendChild(document.createTextNode(value)),parent.appendChild(label),parent.appendChild(document.createElement("br"))}function createInputNodeCheckBox(parent,id,name,value){const checkbox=document.createElement("input");checkbox.type="checkbox",checkbox.id=id,checkbox.name=name,checkbox.value=value;const label=document.createElement("label");label.appendChild(checkbox),label.appendChild(document.createTextNode(value)),parent.appendChild(label),parent.appendChild(document.createElement("br"))}}}));

//# sourceMappingURL=quiz.min.js.map