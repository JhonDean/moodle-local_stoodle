{"version":3,"file":"quiz.min.js","sources":["../src/quiz.js"],"sourcesContent":["export const init = () => {\n    const questionSet = JSON.parse(document.getElementById(\"question-set\").innerHTML);\n    const answerSet = JSON.parse(document.getElementById(\"answer-set\").innerHTML);\n    const questionDiv = document.querySelector(\".js-answer-area\");\n    const scoreArea = document.querySelector(\".score\");\n    const totalQuestions = Object.values(questionSet).length;\n    // window.console.log(questionSet);\n    // window.console.log(answerSet);\n\n    document.querySelector(\".submit-button\").addEventListener('click', () => {\n        questionValidation();\n    });\n\n    scoreArea.innerHTML = \"Score: 0 / \" + totalQuestions;\n    for (const key in Object.values(questionSet)) {\n        // Create a new div to house the question-answer pair\n        const newDiv = document.createElement(\"div\");\n        newDiv.appendChild(document.createElement(\"p\"))\n            .textContent = \"Question \" + (parseInt(key) + 1) + \": \" + Object.values(questionSet)[key].question_text;\n\n        // Check if it's a multiple choice or open-response question\n        if (Object.values(questionSet)[key].is_multiple_choice === 0) {\n            newDiv.id = \"open-response\";\n            createOpenResponseQuestion(newDiv, Object.values(questionSet)[key].id);\n        } else {\n            newDiv.id = \"multiple-choice\";\n            createMultipleChoiceQuestion(newDiv, Object.values(questionSet)[key].id, answerSet);\n        }\n        questionDiv.appendChild(newDiv);\n    }\n\n    /**\n     * Creates a multiple choice question.\n     *\n     * @param {object} parent\n     * @param {int} questionId\n     * @param {object} answerSet\n     */\n    function createMultipleChoiceQuestion(parent, questionId, answerSet) {\n        for (const key in Object.values(answerSet)) {\n            // Match answer id to question id\n            const dbId = Object.values(answerSet)[key].stoodle_quiz_questionsid;\n            if (dbId === questionId) {\n                createInputNode(parent, \"someid\", (questionId), Object.values(answerSet)[key].option_text);\n            } else {\n                window.console.log(\"Something wrong: \" + dbId + \" does not equal \" + questionId);\n            }\n        }\n    }\n\n    /**\n     * Creates a open response question.\n     *\n     * @param {object} parent\n     * @param {string} name\n     */\n    function createOpenResponseQuestion(parent, name) {\n        const textInput = document.createElement(\"input\");\n        textInput.type = \"text\";\n        textInput.name = name;\n        parent.appendChild(textInput);\n    }\n\n    /**\n     * Creates a multiple choice question.\n     *\n     * @param {object} parent\n     * @param {string} id\n     * @param {string} name\n     * @param {string} value\n     */\n    function createInputNode(parent, id, name, value) {\n        // Create a radio input\n        const radio = document.createElement(\"input\");\n        radio.type = \"radio\";\n        radio.id = id;\n        radio.name = name;\n        radio.value = value;\n\n        // Create the label to go with it\n        const label = document.createElement(\"label\");\n        label.appendChild(document.createTextNode(value));\n\n        // Append them to the parent\n        parent.appendChild(radio);\n        parent.appendChild(label);\n        parent.appendChild(document.createElement(\"br\"));\n    }\n\n    /**\n     * Validates the questions on the quiz. Checks if right or wrong.\n     *\n     */\n    function questionValidation() {\n        let numCorrect = 0;\n        for (const key in Object.values(questionSet)) {\n            // Getting the selected radio button value\n            const question = Object.values(questionSet)[key].id;\n            let option = null;\n\n            if (document.querySelector('input[name = \"' + question + '\"]').parentElement.id === \"multiple-choice\") {\n                option = document.querySelector('input[name = \"' + question + '\"]:checked');\n            } else {\n                option = document.querySelector('input[name = \"' + question + '\"]');\n            }\n\n            if (option === null) {\n                alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n                return;\n            }\n\n            // Comparing them to the answers\n            for (const answerKey in Object.values(answerSet)) {\n                const answerText = Object.values(answerSet)[answerKey].option_text;\n                const answerIsCorrect = parseInt(Object.values(answerSet)[answerKey].is_correct);\n                if (answerText === option.value && answerIsCorrect === 1) {\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    numCorrect++;\n                    break;\n                } else if (answerText === option.value && answerIsCorrect === 0) {\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is wrong\");\n                    break;\n                }\n            }\n        }\n\n        scoreArea.innerText = \"Score: \" + numCorrect + \" / \" + totalQuestions;\n    }\n};\n"],"names":["_exports","init","questionSet","JSON","parse","document","getElementById","innerHTML","answerSet","questionDiv","querySelector","scoreArea","totalQuestions","Object","values","length","addEventListener","numCorrect","key","question","id","option","parentElement","alert","parseInt","answerKey","answerText","option_text","answerIsCorrect","is_correct","value","window","console","log","innerText","questionValidation","newDiv","createElement","appendChild","textContent","question_text","is_multiple_choice","createOpenResponseQuestion","createMultipleChoiceQuestion","parent","questionId","dbId","stoodle_quiz_questionsid","createInputNode","name","textInput","type","radio","label","createTextNode"],"mappings":"yIAgIEA,SAAAC,KAhIkBA,KAChB,MAAMC,YAAcC,KAAKC,MAAMC,SAASC,eAAe,gBAAgBC,WACjEC,UAAYL,KAAKC,MAAMC,SAASC,eAAe,cAAcC,WAC7DE,YAAcJ,SAASK,cAAc,mBACrCC,UAAYN,SAASK,cAAc,UACnCE,eAAiBC,OAAOC,OAAOZ,aAAaa,OAIlDV,SAASK,cAAc,kBAAkBM,iBAAiB,SAAS,MAoFnE,WACI,IAAIC,WAAa,EACjB,IAAK,MAAMC,OAAOL,OAAOC,OAAOZ,aAAc,CAE1C,MAAMiB,SAAWN,OAAOC,OAAOZ,aAAagB,KAAKE,GACjD,IAAIC,OAAS,KAQb,GALIA,OADgF,oBAAhFhB,SAASK,cAAc,iBAAmBS,SAAW,MAAMG,cAAcF,GAChEf,SAASK,cAAc,iBAAmBS,SAAW,cAErDd,SAASK,cAAc,iBAAmBS,SAAW,MAGnD,OAAXE,OAEA,YADAE,MAAM,aAAeC,SAASN,KAAO,GAAK,kBAK9C,IAAK,MAAMO,aAAaZ,OAAOC,OAAON,WAAY,CAC9C,MAAMkB,WAAab,OAAOC,OAAON,WAAWiB,WAAWE,YACjDC,gBAAkBJ,SAASX,OAAOC,OAAON,WAAWiB,WAAWI,YACrE,GAAIH,aAAeL,OAAOS,OAA6B,IAApBF,gBAAuB,CACtDG,OAAOC,QAAQC,IAAI,aAAeT,SAASN,KAAO,GAAK,eACvDD,aACA,MACG,GAAIS,aAAeL,OAAOS,OAA6B,IAApBF,gBAAuB,CAC7DG,OAAOC,QAAQC,IAAI,aAAeT,SAASN,KAAO,GAAK,aACvD,QAKZP,UAAUuB,UAAY,UAAYjB,WAAa,MAAQL,eApHvDuB,EAAoB,IAGxBxB,UAAUJ,UAAY,cAAgBK,eACtC,IAAK,MAAMM,OAAOL,OAAOC,OAAOZ,aAAc,CAE1C,MAAMkC,OAAS/B,SAASgC,cAAc,OACtCD,OAAOE,YAAYjC,SAASgC,cAAc,MACrCE,YAAc,aAAef,SAASN,KAAO,GAAK,KAAOL,OAAOC,OAAOZ,aAAagB,KAAKsB,cAGnC,IAAvD3B,OAAOC,OAAOZ,aAAagB,KAAKuB,oBAChCL,OAAOhB,GAAK,gBACZsB,2BAA2BN,OAAQvB,OAAOC,OAAOZ,aAAagB,KAAKE,MAEnEgB,OAAOhB,GAAK,kBACZuB,6BAA6BP,OAAQvB,OAAOC,OAAOZ,aAAagB,KAAKE,GAAIZ,YAE7EC,YAAY6B,YAAYF,QAU5B,SAASO,6BAA6BC,OAAQC,WAAYrC,WACtD,IAAK,MAAMU,OAAOL,OAAOC,OAAON,WAAY,CAExC,MAAMsC,KAAOjC,OAAOC,OAAON,WAAWU,KAAK6B,yBACvCD,OAASD,WACTG,gBAAgBJ,OAAQ,SAAWC,WAAahC,OAAOC,OAAON,WAAWU,KAAKS,aAE9EI,OAAOC,QAAQC,IAAI,oBAAsBa,KAAO,mBAAqBD,aAWjF,SAASH,2BAA2BE,OAAQK,MACxC,MAAMC,UAAY7C,SAASgC,cAAc,SACzCa,UAAUC,KAAO,OACjBD,UAAUD,KAAOA,KACjBL,OAAON,YAAYY,WAWvB,SAASF,gBAAgBJ,OAAQxB,GAAI6B,KAAMnB,OAEvC,MAAMsB,MAAQ/C,SAASgC,cAAc,SACrCe,MAAMD,KAAO,QACbC,MAAMhC,GAAKA,GACXgC,MAAMH,KAAOA,KACbG,MAAMtB,MAAQA,MAGd,MAAMuB,MAAQhD,SAASgC,cAAc,SACrCgB,MAAMf,YAAYjC,SAASiD,eAAexB,QAG1Cc,OAAON,YAAYc,OACnBR,OAAON,YAAYe,OACnBT,OAAON,YAAYjC,SAASgC,cAAc,QA0ChD"}