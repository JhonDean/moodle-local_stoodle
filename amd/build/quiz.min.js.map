{"version":3,"file":"quiz.min.js","sources":["../src/quiz.js"],"sourcesContent":["export const init = () => {\n    const questionSet = JSON.parse(document.getElementById(\"question-set\").innerHTML);\n    const answerSet = JSON.parse(document.getElementById(\"answer-set\").innerHTML);\n    const questionDiv = document.querySelector(\".js-answer-area\");\n    const scoreArea = document.querySelector(\".score\");\n    const totalQuestions = Object.values(questionSet).length;\n\n    const newSet = createFullSet(questionSet, answerSet);\n    const typeSet = declareQuestionTypes(questionSet, answerSet);\n    window.console.log(questionSet);\n    window.console.log(answerSet);\n    window.console.log([...newSet.entries()]);\n    window.console.log(typeSet);\n    window.console.log(newSet.get(\"q1\")[0][0]);\n\n    scoreArea.innerHTML = \"Score: 0 / \" + totalQuestions;\n    document.querySelector(\".submit-button\").addEventListener('click', () => {\n        questionValidation();\n    });\n\n    // Create questions and options\n    for (const key in Object.values(questionSet)) {\n        const newDiv = document.createElement(\"div\");\n        newDiv.id = \"stoodle-div\";\n        const questionText = document.createElement(\"p\");\n        questionText.id = \"stoodle-question-text\";\n        questionText.textContent = \"Question \" + (parseInt(key) + 1) + \": \" + Object.values(questionSet)[key].question_text;\n        newDiv.appendChild(questionText);\n\n        // Check if it's a multiple choice or open-response question\n        // if (parseInt(Object.values(questionSet)[key].is_multiple_choice) === 0) {\n        //     newDiv.id = \"open-response\";\n        //     createOpenResponseQuestion(newDiv, (\"option_\" + Object.values(questionSet)[key].id));\n        // } else {\n        //     newDiv.id = \"multiple-choice\";\n        //     createMultipleChoiceQuestion(newDiv, Object.values(questionSet)[key].id, answerSet);\n        // }\n        switch (typeSet[key]) {\n            default:\n            case 0:\n                newDiv.id = \"open-response\";\n                createOpenResponseQuestion(newDiv, (\"option_\" + key));\n                break;\n            case 1:\n                newDiv.id = \"multiple-choice\";\n                for (const element in newSet.get(Object.values(questionSet)[key].question_text)[0]) {\n                    const optionText = newSet.get(Object.values(questionSet)[key].question_text)[0][element];\n                    createInputNodeRadio(newDiv, (\"option_\" + key), key, optionText);\n                }\n                break;\n            case 2:\n                newDiv.id = \"select-all\";\n                for (const element in newSet.get(Object.values(questionSet)[key].question_text)[0]) {\n                    const optionText = newSet.get(Object.values(questionSet)[key].question_text)[0][element];\n                    createInputNodeCheckBox(newDiv, (\"option_\" + key), key, optionText);\n                }\n                break;\n        }\n        questionDiv.appendChild(newDiv);\n    }\n\n    /**\n     * Creates a open response question.\n     *\n     * @param {object} parent\n     * @param {string} name\n     */\n    function createOpenResponseQuestion(parent, name) {\n        const label = document.createElement(\"label\");\n        const textInput = document.createElement(\"textarea\");\n        textInput.id = name;\n        textInput.cols = 100;\n        label.appendChild(textInput);\n        parent.appendChild(label);\n    }\n\n    /**\n     * Creates a radio button.\n     *\n     * @param {object} parent\n     * @param {string} id\n     * @param {string} name\n     * @param {string} value\n     */\n    function createInputNodeRadio(parent, id, name, value) {\n        // Create a radio input\n        const radio = document.createElement(\"input\");\n        radio.type = \"radio\";\n        radio.id = id;\n        radio.name = name;\n        radio.value = value;\n\n        // Create the label to go with it\n        const label = document.createElement(\"label\");\n        label.appendChild(radio);\n        label.appendChild(document.createTextNode(value));\n\n        // Append them to the parent\n        parent.appendChild(label);\n        parent.appendChild(document.createElement(\"br\"));\n    }\n\n    /**\n     * Creates a checkbox button.\n     *\n     * @param {object} parent\n     * @param {string} id\n     * @param {string} name\n     * @param {string} value\n     */\n    function createInputNodeCheckBox(parent, id, name, value) {\n        // Create a radio input\n        const checkbox = document.createElement(\"input\");\n        checkbox.type = \"checkbox\";\n        checkbox.id = id;\n        checkbox.name = name;\n        checkbox.value = value;\n\n        // Create the label to go with it\n        const label = document.createElement(\"label\");\n        label.appendChild(checkbox);\n        label.appendChild(document.createTextNode(value));\n\n        // Append them to the parent\n        parent.appendChild(label);\n        parent.appendChild(document.createElement(\"br\"));\n    }\n\n    /**\n     * Validates the questions on the quiz. Checks if right or wrong.\n     *\n     */\n    function questionValidation() {\n        let numCorrect = 0;\n        const correctHex = \"\\u{2705}\";\n        const incorrectHex = \"\\u{274C}\";\n\n        for (const key in Object.values(questionSet)) {\n            const dbQuestionText = Object.values(questionSet)[key].question_text;\n            const htmlQuestionText = \"Question \" + (parseInt(key) + 1) + \": \" + dbQuestionText;\n\n            if (typeSet[key] === 0) {\n                // Check Open Response\n                const option = document.getElementById(\"option_\" + key);\n                if (option === null) {\n                    alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n                    return;\n                }\n                const parent = option.parentElement.parentElement.children[0];\n                if (option.value === newSet.get(dbQuestionText)[1][0]) {\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    numCorrect++;\n                    parent.innerText = htmlQuestionText + \" \" + correctHex;\n                } else {\n                    parent.innerText = htmlQuestionText + \" \" + incorrectHex + \" (manual review required)\";\n                    window.console.log(\"open response wrong what\");\n                }\n            } else if (typeSet[key] === 1) {\n                // Check Multiple Choice\n                const option = document.querySelector('input[name = \"' + key + '\"]:checked');\n                if (option === null) {\n                    alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n                    return;\n                }\n                const parent = option.parentElement.parentElement.children[0];\n                if (newSet.get(dbQuestionText)[1][0] === option.value) {\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    numCorrect++;\n                    parent.innerText = htmlQuestionText + \" \" + correctHex;\n                } else {\n                    window.console.log(\"multiple choice wrong what\");\n                    parent.innerText = htmlQuestionText + \" \" + incorrectHex;\n                }\n            } else if (typeSet[key] === 2) {\n                // Check Select All\n                const option = document.querySelectorAll('input[name=\"' + key + '\"]:checked');\n                if (option.length < 1) {\n                    alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n                    return;\n                }\n                const parent = document.querySelector('input[name=\"' + key + '\"]:checked').parentElement.parentElement.children[0];\n                let selectAllCorrectCounter = 0;\n                window.console.log(option);\n                if (newSet.get(dbQuestionText)[1].length !== option.length) {\n                    parent.innerText = htmlQuestionText + \" \" + incorrectHex;\n                    continue;\n                }\n                for (let i = 0; i < newSet.get(dbQuestionText)[1].length; i++) {\n                    if (newSet.get(dbQuestionText)[0][i] === option[i].value) {\n                        selectAllCorrectCounter++;\n                    } else {\n                        window.console.log(\"select all wrong what\");\n                    }\n                }\n                if (selectAllCorrectCounter === newSet.get(dbQuestionText)[1].length) {\n                    numCorrect++;\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    parent.innerText = htmlQuestionText + \" \" + correctHex;\n                } else {\n                    parent.innerText = htmlQuestionText + \" \" + incorrectHex;\n                }\n            }\n        }\n\n        // for (const key in Object.values(questionSet)) {\n        //     const question = Object.values(questionSet)[key].id;\n        //     const parent = document.getElementById(\"option_\" + question).parentElement.parentElement;\n        //     let option = null;\n\n        //     if (parent.id === \"multiple-choice\") {\n        //         option = document.querySelector('input[name = \"' + question + '\"]:checked');\n        //     } else {\n        //         option = document.getElementById(\"option_\" + question);\n        //     }\n\n        //     if (option === null) {\n        //         alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n        //         return;\n        //     }\n\n        //     // Comparing them to the answers\n        //     for (const answerKey in Object.values(answerSet)) {\n        //         const questionText = \"Question \" + (parseInt(key) + 1) + \": \" + Object.values(questionSet)[key].question_text;\n        //         const answerText = Object.values(answerSet)[answerKey].option_text;\n        //         const answerIsCorrect = parseInt(Object.values(answerSet)[answerKey].is_correct);\n        //         if (answerText === option.value && answerIsCorrect === 1) {\n        //             window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n        //             numCorrect++;\n        //             parent.children[0].innerText = questionText + \" \\u{2705}\";\n        //             break;\n        //         } else if (answerText === option.value && answerIsCorrect === 0) {\n        //             window.console.log(\"Question \" + (parseInt(key) + 1) + \" is wrong\");\n        //             parent.children[0].innerText = questionText + \" \\u{274C}\";\n        //             break;\n        //         } else if (parent.id === \"open-response\") {\n        //             parent.children[0].innerText = questionText + \" \\u{274C} (manual review required)\";\n        //         }\n        //     }\n        // }\n\n        scoreArea.innerText = \"Score: \" + numCorrect + \" / \" + totalQuestions;\n    }\n\n    /**\n     * Returns an array with question types.\n     * 0 - Open Response,\n     * 1 - Multiple Choice,\n     * 2 - Select All\n     *\n     * @param {Object} questions\n     * @param {Object} options\n     * @return {Array} Resulting array with question types.\n     */\n    function declareQuestionTypes(questions, options) {\n        const questionTypesArray = new Array(Object.values(questions).length);\n        for (const questionKey in Object.values(questions)) {\n            const questionId = parseInt(Object.values(questions)[questionKey].id);\n            let count = 0;\n            for (const answerKey in Object.values(options)) {\n                const answerObject = Object.values(options)[answerKey];\n                if (parseInt(answerObject.stoodle_quiz_questionsid) === questionId && parseInt(answerObject.is_correct) === 1) {\n                    count++;\n                }\n            }\n            if (count > 1) {\n                questionTypesArray[questionKey] = 2;\n            } else if (count === 1 && parseInt(Object.values(questions)[questionKey].is_multiple_choice) === 1) {\n                questionTypesArray[questionKey] = 1;\n            } else {\n                questionTypesArray[questionKey] = 0;\n            }\n        }\n        return questionTypesArray;\n    }\n\n\n    /**\n     * Return an array of questions and answers.\n     *\n     * @param {Object} qSet\n     * @param {Object} oSet\n     * @return {Map} Resulting array\n     */\n    function createFullSet(qSet, oSet) {\n        let resultSet = new Map();\n        for (const qKey in Object.values(qSet)) {\n            let optionArray = [];\n            let answerArray = [];\n            for (const oKey in Object.values(oSet)) {\n                if (Object.values(qSet)[qKey].question_number === Object.values(oSet)[oKey].stoodle_quiz_questionsid) {\n                    optionArray.push(Object.values(oSet)[oKey].option_text);\n                    if (parseInt(Object.values(oSet)[oKey].is_correct) === 1) {\n                        answerArray.push(Object.values(oSet)[oKey].option_text);\n                    }\n                }\n            }\n            resultSet.set(Object.values(qSet)[qKey].question_text, [optionArray, answerArray]);\n        }\n        return resultSet;\n    }\n};\n"],"names":["_exports","init","questionSet","JSON","parse","document","getElementById","innerHTML","answerSet","questionDiv","querySelector","scoreArea","totalQuestions","Object","values","length","newSet","qSet","oSet","resultSet","Map","qKey","optionArray","answerArray","oKey","question_number","stoodle_quiz_questionsid","push","option_text","parseInt","is_correct","set","question_text","createFullSet","typeSet","questions","options","questionTypesArray","Array","questionKey","questionId","id","count","answerKey","answerObject","is_multiple_choice","declareQuestionTypes","window","console","log","entries","get","addEventListener","numCorrect","correctHex","incorrectHex","key","dbQuestionText","htmlQuestionText","option","alert","parent","parentElement","children","value","innerText","querySelectorAll","selectAllCorrectCounter","i","questionValidation","newDiv","createElement","questionText","textContent","appendChild","createOpenResponseQuestion","element","createInputNodeRadio","createInputNodeCheckBox","name","label","textInput","cols","radio","type","createTextNode","checkbox"],"mappings":"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"}