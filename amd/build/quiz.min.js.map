{"version":3,"file":"quiz.min.js","sources":["../src/quiz.js"],"sourcesContent":["export const init = () => {\n    const questionDiv = document.querySelector(\".js-answer-area\");\n    const questionSet = JSON.parse(document.getElementById(\"question-set\").innerHTML);\n    const answerSet = JSON.parse(document.getElementById(\"answer-set\").innerHTML);\n    window.console.log(questionSet);\n    window.console.log(answerSet);\n\n    for (const key in Object.values(questionSet)) {\n        // Check if it's a multiple choice question\n        if (Object.values(questionSet)[key].is_multiple_choice === 0) {\n            window.console.log(\"Not multiple choice\");\n            continue;\n        }\n\n        // Create a new div to house the question-answer pair\n        const newDiv = document.createElement(\"div\");\n        newDiv.appendChild(document.createElement(\"p\"))\n            .textContent = \"Question \" + (parseInt(key) + 1) + \": \" + Object.values(questionSet)[key].question_text;\n        createMultipleChoiceQuestion(newDiv, Object.values(questionSet)[key].id, answerSet);\n        questionDiv.appendChild(newDiv);\n    }\n\n    /**\n     * Creates a multiple choice question.\n     *\n     * @param {object} parent\n     * @param {int} questionId\n     * @param {object} answerSet\n     */\n    function createMultipleChoiceQuestion(parent, questionId, answerSet) {\n        for (const key in Object.values(answerSet)) {\n            // Match answer id to question id\n            const dbId = Object.values(answerSet)[key].stoodle_quiz_questionsid;\n            if (dbId === questionId) {\n                createInputNode(parent, \"someid\", (\"someName\" + questionId), Object.values(answerSet)[key].option_text);\n            } else {\n                window.console.log(\"Something wrong: \" + dbId + \" does not equal \" + questionId);\n            }\n        }\n    }\n\n    /**\n     * Creates a multiple choice question.\n     *\n     * @param {object} parent\n     * @param {string} id\n     * @param {string} name\n     * @param {string} value\n     */\n    function createInputNode(parent, id, name, value) {\n        // Create a radio input\n        const radio = document.createElement(\"input\");\n        radio.type = \"radio\";\n        radio.id = id;\n        radio.name = name;\n        radio.value = value;\n\n        // Create the label to go with it\n        const label = document.createElement(\"label\");\n        label.appendChild(document.createTextNode(value));\n\n        // Append them to the parent\n        parent.appendChild(radio);\n        parent.appendChild(label);\n        parent.appendChild(document.createElement(\"br\"));\n        window.console.log(\"Radio buttons are being created\");\n    }\n};\n\n\n\nexport const other = () => {\n    // fetch(\"quiz_activity.php\").then(res => res.json()).then(data => {\n    //     window.console.log(data);\n    // }).catch(errorMsg => {\n    //     window.console.log(errorMsg);\n    // });\n    var responseClone;\n    fetch(\"quiz_activity.php\")\n        .then((response) => {\n            if (!response.ok) { // Before parsing (i.e. decoding) the JSON data,\n                                // check for any errors.\n                // In case of an error, throw.\n                throw new Error(\"Something went wrong!\");\n            }\n            responseClone = response.clone();\n            return response.json(); // Parse the JSON data.\n        })\n        .then((data) => {\n            // This is where you handle what to do with the response.\n            // alert(data); // Will alert: 42\n            window.console.log(data);\n        })\n        .catch((rejectionReason) => {\n            // This is where you handle errors.\n            window.console.log('Error parsing JSON from response:', rejectionReason, responseClone); // 4\n            responseClone.text() // 5\n            .then(function (bodyText) {\n                window.console.log('Received the following instead of valid JSON:', bodyText); // 6\n            });\n        });\n};\n"],"names":["_exports","init","questionDiv","document","querySelector","questionSet","JSON","parse","getElementById","innerHTML","answerSet","window","console","log","key","Object","values","is_multiple_choice","newDiv","createElement","appendChild","textContent","parseInt","question_text","createMultipleChoiceQuestion","id","parent","questionId","dbId","stoodle_quiz_questionsid","createInputNode","option_text","name","value","radio","type","label","createTextNode","other","responseClone","fetch","then","response","ok","Error","clone","json","data","catch","rejectionReason","text","bodyText"],"mappings":"wJAmEEA,SAAAC,KAnEkBA,KAChB,MAAMC,YAAcC,SAASC,cAAc,mBACrCC,YAAcC,KAAKC,MAAMJ,SAASK,eAAe,gBAAgBC,WACjEC,UAAYJ,KAAKC,MAAMJ,SAASK,eAAe,cAAcC,WACnEE,OAAOC,QAAQC,IAAIR,aACnBM,OAAOC,QAAQC,IAAIH,WAEnB,IAAK,MAAMI,OAAOC,OAAOC,OAAOX,aAAc,CAE1C,GAA2D,IAAvDU,OAAOC,OAAOX,aAAaS,KAAKG,mBAA0B,CAC1DN,OAAOC,QAAQC,IAAI,uBACnB,SAIJ,MAAMK,OAASf,SAASgB,cAAc,OACtCD,OAAOE,YAAYjB,SAASgB,cAAc,MACrCE,YAAc,aAAeC,SAASR,KAAO,GAAK,KAAOC,OAAOC,OAAOX,aAAaS,KAAKS,cAC9FC,6BAA6BN,OAAQH,OAAOC,OAAOX,aAAaS,KAAKW,GAAIf,WACzER,YAAYkB,YAAYF,QAU5B,SAASM,6BAA6BE,OAAQC,WAAYjB,WACtD,IAAK,MAAMI,OAAOC,OAAOC,OAAON,WAAY,CAExC,MAAMkB,KAAOb,OAAOC,OAAON,WAAWI,KAAKe,yBACvCD,OAASD,WACTG,gBAAgBJ,OAAQ,SAAW,WAAaC,WAAaZ,OAAOC,OAAON,WAAWI,KAAKiB,aAE3FpB,OAAOC,QAAQC,IAAI,oBAAsBe,KAAO,mBAAqBD,aAajF,SAASG,gBAAgBJ,OAAQD,GAAIO,KAAMC,OAEvC,MAAMC,MAAQ/B,SAASgB,cAAc,SACrCe,MAAMC,KAAO,QACbD,MAAMT,GAAKA,GACXS,MAAMF,KAAOA,KACbE,MAAMD,MAAQA,MAGd,MAAMG,MAAQjC,SAASgB,cAAc,SACrCiB,MAAMhB,YAAYjB,SAASkC,eAAeJ,QAG1CP,OAAON,YAAYc,OACnBR,OAAON,YAAYgB,OACnBV,OAAON,YAAYjB,SAASgB,cAAc,OAC1CR,OAAOC,QAAQC,IAAI,qCAoCzBb,SAAAsC,MA9BmBA,KAMjB,IAAIC,cACJC,MAAM,qBACDC,MAAMC,WACH,IAAKA,SAASC,GAGV,MAAM,IAAIC,MAAM,yBAGpB,OADAL,cAAgBG,SAASG,QAClBH,SAASI,MAAM,IAEzBL,MAAMM,OAGHpC,OAAOC,QAAQC,IAAIkC,KAAK,IAE3BC,OAAOC,kBAEJtC,OAAOC,QAAQC,IAAI,oCAAqCoC,gBAAiBV,eACzEA,cAAcW,OACbT,MAAK,SAAUU,UACZxC,OAAOC,QAAQC,IAAI,gDAAiDsC,YACtE,GACJ,CACR"}