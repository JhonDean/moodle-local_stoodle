{"version":3,"file":"quiz.min.js","sources":["../src/quiz.js"],"sourcesContent":["export const init = () => {\n    const questionSet = JSON.parse(document.getElementById(\"question-set\").innerHTML);\n    const answerSet = JSON.parse(document.getElementById(\"answer-set\").innerHTML);\n    const questionDiv = document.querySelector(\".js-answer-area\");\n    const scoreArea = document.querySelector(\".score\");\n    const totalQuestions = Object.values(questionSet).length;\n\n    const newSet = createFullSet(questionSet, answerSet);\n    const typeSet = declareQuestionTypes(questionSet, answerSet);\n    window.console.log(newSet);\n    window.console.log(typeSet);\n\n    scoreArea.innerHTML = \"Score: 0 / \" + totalQuestions;\n    document.querySelector(\".submit-button\").addEventListener('click', () => {\n        questionValidation();\n    });\n\n    // Create questions and options\n    for (const key in Object.values(questionSet)) {\n        const newDiv = document.createElement(\"div\");\n        newDiv.id = \"stoodle-div\";\n        const questionText = document.createElement(\"p\");\n        questionText.id = \"stoodle-question-text\";\n        questionText.textContent = \"Question \" + (parseInt(key) + 1) + \": \" + Object.values(questionSet)[key].question_text;\n        newDiv.appendChild(questionText);\n\n        switch (typeSet[key]) {\n            default:\n            case 0:\n                newDiv.id = \"open-response\";\n                createOpenResponseQuestion(newDiv, (\"option_\" + key));\n                break;\n            case 1:\n                newDiv.id = \"multiple-choice\";\n                for (const element in newSet.get(Object.values(questionSet)[key].question_text)[0]) {\n                    const optionText = newSet.get(Object.values(questionSet)[key].question_text)[0][element];\n                    createInputNodeRadio(newDiv, (\"option_\" + key), key, optionText);\n                }\n                break;\n            case 2:\n                newDiv.id = \"select-all\";\n                for (const element in newSet.get(Object.values(questionSet)[key].question_text)[0]) {\n                    const optionText = newSet.get(Object.values(questionSet)[key].question_text)[0][element];\n                    createInputNodeCheckBox(newDiv, (\"option_\" + key), key, optionText);\n                }\n                break;\n        }\n        questionDiv.appendChild(newDiv);\n    }\n\n    /**\n     * Creates a open response question.\n     *\n     * @param {object} parent\n     * @param {string} name\n     */\n    function createOpenResponseQuestion(parent, name) {\n        const label = document.createElement(\"label\");\n        const textInput = document.createElement(\"textarea\");\n        textInput.id = name;\n        textInput.cols = 100;\n        label.appendChild(textInput);\n        parent.appendChild(label);\n    }\n\n    /**\n     * Creates a radio button.\n     *\n     * @param {object} parent\n     * @param {string} id\n     * @param {string} name\n     * @param {string} value\n     */\n    function createInputNodeRadio(parent, id, name, value) {\n        // Create a radio input\n        const radio = document.createElement(\"input\");\n        radio.type = \"radio\";\n        radio.id = id;\n        radio.name = name;\n        radio.value = value;\n\n        // Create the label to go with it\n        const label = document.createElement(\"label\");\n        label.appendChild(radio);\n        label.appendChild(document.createTextNode(value));\n\n        // Append them to the parent\n        parent.appendChild(label);\n        parent.appendChild(document.createElement(\"br\"));\n    }\n\n    /**\n     * Creates a checkbox button.\n     *\n     * @param {object} parent\n     * @param {string} id\n     * @param {string} name\n     * @param {string} value\n     */\n    function createInputNodeCheckBox(parent, id, name, value) {\n        // Create a radio input\n        const checkbox = document.createElement(\"input\");\n        checkbox.type = \"checkbox\";\n        checkbox.id = id;\n        checkbox.name = name;\n        checkbox.value = value;\n\n        // Create the label to go with it\n        const label = document.createElement(\"label\");\n        label.appendChild(checkbox);\n        label.appendChild(document.createTextNode(value));\n\n        // Append them to the parent\n        parent.appendChild(label);\n        parent.appendChild(document.createElement(\"br\"));\n    }\n\n    /**\n     * Validates the questions on the quiz. Checks if right or wrong.\n     *\n     */\n    function questionValidation() {\n        let numCorrect = 0;\n        const correctHex = \"\\u{2705}\";\n        const incorrectHex = \"\\u{274C}\";\n\n        for (const key in Object.values(questionSet)) {\n            const dbQuestionText = Object.values(questionSet)[key].question_text;\n            const htmlQuestionText = \"Question \" + (parseInt(key) + 1) + \": \" + dbQuestionText;\n\n            if (typeSet[key] === 0) {\n                // Check Open Response\n                const option = document.getElementById(\"option_\" + key);\n                if (option === null) {\n                    alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n                    return;\n                }\n                const parent = option.parentElement.parentElement.children[0];\n                if (option.value === newSet.get(dbQuestionText)[1][0]) {\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    numCorrect++;\n                    parent.innerText = htmlQuestionText + \" \" + correctHex;\n                } else {\n                    parent.innerText = htmlQuestionText + \" \" + incorrectHex + \" (manual review required)\";\n                }\n            } else if (typeSet[key] === 1) {\n                // Check Multiple Choice\n                const option = document.querySelector('input[name = \"' + key + '\"]:checked');\n                if (option === null) {\n                    alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n                    return;\n                }\n                const parent = option.parentElement.parentElement.children[0];\n                if (newSet.get(dbQuestionText)[1][0] === option.value) {\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    numCorrect++;\n                    parent.innerText = htmlQuestionText + \" \" + correctHex;\n                } else {\n                    parent.innerText = htmlQuestionText + \" \" + incorrectHex;\n                }\n            } else if (typeSet[key] === 2) {\n                // Check Select All\n                const option = document.querySelectorAll('input[name=\"' + key + '\"]:checked');\n                if (option.length < 1) {\n                    alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n                    return;\n                }\n                const parent = document.querySelector('input[name=\"' + key + '\"]:checked').parentElement.parentElement.children[0];\n                let selectAllCorrectCounter = 0;\n                if (newSet.get(dbQuestionText)[1].length !== option.length) {\n                    parent.innerText = htmlQuestionText + \" \" + incorrectHex;\n                    continue;\n                }\n                for (let i = 0; i < newSet.get(dbQuestionText)[1].length; i++) {\n                    if (newSet.get(dbQuestionText)[0][i] === option[i].value) {\n                        selectAllCorrectCounter++;\n                    }\n                }\n                if (selectAllCorrectCounter === newSet.get(dbQuestionText)[1].length) {\n                    numCorrect++;\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    parent.innerText = htmlQuestionText + \" \" + correctHex;\n                } else {\n                    parent.innerText = htmlQuestionText + \" \" + incorrectHex;\n                }\n            }\n        }\n\n        scoreArea.innerText = \"Score: \" + numCorrect + \" / \" + totalQuestions;\n    }\n\n    /**\n     * Returns an array with question types.\n     * 0 - Open Response,\n     * 1 - Multiple Choice,\n     * 2 - Select All\n     *\n     * @param {Object} questions\n     * @param {Object} options\n     * @return {Array} Resulting array with question types.\n     */\n    function declareQuestionTypes(questions, options) {\n        const questionTypesArray = new Array(Object.values(questions).length);\n        for (const questionKey in Object.values(questions)) {\n            const questionId = parseInt(Object.values(questions)[questionKey].id);\n            let count = 0;\n            for (const answerKey in Object.values(options)) {\n                const answerObject = Object.values(options)[answerKey];\n                if (parseInt(answerObject.stoodle_quiz_questionsid) === questionId && parseInt(answerObject.is_correct) === 1) {\n                    count++;\n                }\n            }\n            if (count > 1) {\n                questionTypesArray[questionKey] = 2;\n            } else if (count === 1 && parseInt(Object.values(questions)[questionKey].is_multiple_choice) === 1) {\n                questionTypesArray[questionKey] = 1;\n            } else {\n                questionTypesArray[questionKey] = 0;\n            }\n        }\n        return questionTypesArray;\n    }\n\n\n    /**\n     * Return an array of questions and answers.\n     *\n     * @param {Object} qSet\n     * @param {Object} oSet\n     * @return {Map} Resulting array\n     */\n    function createFullSet(qSet, oSet) {\n        let resultSet = new Map();\n        for (const qKey in Object.values(qSet)) {\n            let optionArray = [];\n            let answerArray = [];\n            for (const oKey in Object.values(oSet)) {\n                const dbQuestionKey = parseInt(Object.values(qSet)[qKey].id);\n                const dbOptionKey = parseInt(Object.values(oSet)[oKey].stoodle_quiz_questionsid);\n                if (dbQuestionKey === dbOptionKey) {\n                    optionArray.push(Object.values(oSet)[oKey].option_text);\n                    if (parseInt(Object.values(oSet)[oKey].is_correct) === 1) {\n                        answerArray.push(Object.values(oSet)[oKey].option_text);\n                    }\n                } else {\n                    window.console.log(dbQuestionKey + \" does not match \" + dbOptionKey);\n                }\n            }\n            window.console.log(\"line break-------------------------------------------------------------------------------------\");\n            resultSet.set(Object.values(qSet)[qKey].question_text, [optionArray, answerArray]);\n        }\n        return resultSet;\n    }\n};\n"],"names":["_exports","init","questionSet","JSON","parse","document","getElementById","innerHTML","answerSet","questionDiv","querySelector","scoreArea","totalQuestions","Object","values","length","newSet","qSet","oSet","resultSet","Map","qKey","optionArray","answerArray","oKey","dbQuestionKey","parseInt","id","dbOptionKey","stoodle_quiz_questionsid","push","option_text","is_correct","window","console","log","set","question_text","createFullSet","typeSet","questions","options","questionTypesArray","Array","questionKey","questionId","count","answerKey","answerObject","is_multiple_choice","declareQuestionTypes","addEventListener","numCorrect","correctHex","incorrectHex","key","dbQuestionText","htmlQuestionText","option","alert","parent","parentElement","children","value","get","innerText","querySelectorAll","selectAllCorrectCounter","i","questionValidation","newDiv","createElement","questionText","textContent","appendChild","createOpenResponseQuestion","element","createInputNodeRadio","createInputNodeCheckBox","name","label","textInput","cols","radio","type","createTextNode","checkbox"],"mappings":"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"}