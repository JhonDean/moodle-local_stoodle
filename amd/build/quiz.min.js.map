{"version":3,"file":"quiz.min.js","sources":["../src/quiz.js"],"sourcesContent":["export const init = () => {\n    const questionSet = JSON.parse(document.getElementById(\"question-set\").innerHTML);\n    const answerSet = JSON.parse(document.getElementById(\"answer-set\").innerHTML);\n    const questionDiv = document.querySelector(\".js-answer-area\");\n    const scoreArea = document.querySelector(\".score\");\n    const totalQuestions = Object.values(questionSet).length;\n\n    const newSet = createFullSet(questionSet, answerSet);\n    const typeSet = declareQuestionTypes(questionSet, answerSet);\n\n    scoreArea.innerHTML = \"Score: 0 / \" + totalQuestions;\n    document.querySelector(\".submit-button\").addEventListener('click', () => {\n        questionValidation();\n    });\n\n    // Create questions and options\n    for (const key in Object.values(questionSet)) {\n        const newDiv = document.createElement(\"div\");\n        newDiv.id = \"stoodle-div\";\n        const questionText = document.createElement(\"p\");\n        questionText.id = \"stoodle-question-text\";\n        questionText.textContent = \"Question \" + (parseInt(key) + 1) + \": \" + Object.values(questionSet)[key].question_text;\n        newDiv.appendChild(questionText);\n\n        switch (typeSet[key]) {\n            default:\n            case 0:\n                newDiv.id = \"open-response\";\n                createOpenResponseQuestion(newDiv, (\"option_\" + key));\n                break;\n            case 1:\n                newDiv.id = \"multiple-choice\";\n                for (const element in newSet.get(Object.values(questionSet)[key].question_text)[0]) {\n                    const optionText = newSet.get(Object.values(questionSet)[key].question_text)[0][element];\n                    createInputNodeRadio(newDiv, (\"option_\" + key), key, optionText);\n                }\n                break;\n            case 2:\n                newDiv.id = \"select-all\";\n                for (const element in newSet.get(Object.values(questionSet)[key].question_text)[0]) {\n                    const optionText = newSet.get(Object.values(questionSet)[key].question_text)[0][element];\n                    createInputNodeCheckBox(newDiv, (\"option_\" + key), key, optionText);\n                }\n                break;\n        }\n        questionDiv.appendChild(newDiv);\n    }\n\n    /**\n     * Creates a open response question.\n     *\n     * @param {object} parent\n     * @param {string} name\n     */\n    function createOpenResponseQuestion(parent, name) {\n        const label = document.createElement(\"label\");\n        const textInput = document.createElement(\"textarea\");\n        textInput.id = name;\n        textInput.cols = 100;\n        label.appendChild(textInput);\n        parent.appendChild(label);\n    }\n\n    /**\n     * Creates a radio button.\n     *\n     * @param {object} parent\n     * @param {string} id\n     * @param {string} name\n     * @param {string} value\n     */\n    function createInputNodeRadio(parent, id, name, value) {\n        // Create a radio input\n        const radio = document.createElement(\"input\");\n        radio.type = \"radio\";\n        radio.id = id;\n        radio.name = name;\n        radio.value = value;\n\n        // Create the label to go with it\n        const label = document.createElement(\"label\");\n        label.appendChild(radio);\n        label.appendChild(document.createTextNode(value));\n\n        // Append them to the parent\n        parent.appendChild(label);\n        parent.appendChild(document.createElement(\"br\"));\n    }\n\n    /**\n     * Creates a checkbox button.\n     *\n     * @param {object} parent\n     * @param {string} id\n     * @param {string} name\n     * @param {string} value\n     */\n    function createInputNodeCheckBox(parent, id, name, value) {\n        // Create a radio input\n        const checkbox = document.createElement(\"input\");\n        checkbox.type = \"checkbox\";\n        checkbox.id = id;\n        checkbox.name = name;\n        checkbox.value = value;\n\n        // Create the label to go with it\n        const label = document.createElement(\"label\");\n        label.appendChild(checkbox);\n        label.appendChild(document.createTextNode(value));\n\n        // Append them to the parent\n        parent.appendChild(label);\n        parent.appendChild(document.createElement(\"br\"));\n    }\n\n    /**\n     * Validates the questions on the quiz. Checks if right or wrong.\n     *\n     */\n    function questionValidation() {\n        let numCorrect = 0;\n        const correctHex = \"\\u{2705}\";\n        const incorrectHex = \"\\u{274C}\";\n\n        for (const key in Object.values(questionSet)) {\n            const dbQuestionText = Object.values(questionSet)[key].question_text;\n            const htmlQuestionText = \"Question \" + (parseInt(key) + 1) + \": \" + dbQuestionText;\n\n            if (typeSet[key] === 0) {\n                // Check Open Response\n                const option = document.getElementById(\"option_\" + key);\n                if (option === null) {\n                    alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n                    return;\n                }\n                const parent = option.parentElement.parentElement.children[0];\n                if (option.value === newSet.get(dbQuestionText)[1][0]) {\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    numCorrect++;\n                    parent.innerText = htmlQuestionText + \" \" + correctHex;\n                } else {\n                    parent.innerText = htmlQuestionText + \" \" + incorrectHex + \" (manual review required)\";\n                }\n            } else if (typeSet[key] === 1) {\n                // Check Multiple Choice\n                const option = document.querySelector('input[name = \"' + key + '\"]:checked');\n                if (option === null) {\n                    alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n                    return;\n                }\n                const parent = option.parentElement.parentElement.children[0];\n                if (newSet.get(dbQuestionText)[1][0] === option.value) {\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    numCorrect++;\n                    parent.innerText = htmlQuestionText + \" \" + correctHex;\n                } else {\n                    parent.innerText = htmlQuestionText + \" \" + incorrectHex;\n                }\n            } else if (typeSet[key] === 2) {\n                // Check Select All\n                const option = document.querySelectorAll('input[name=\"' + key + '\"]:checked');\n                if (option.length < 1) {\n                    alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n                    return;\n                }\n                const parent = document.querySelector('input[name=\"' + key + '\"]:checked').parentElement.parentElement.children[0];\n                let selectAllCorrectCounter = 0;\n                if (newSet.get(dbQuestionText)[1].length !== option.length) {\n                    parent.innerText = htmlQuestionText + \" \" + incorrectHex;\n                    continue;\n                }\n                for (let i = 0; i < newSet.get(dbQuestionText)[1].length; i++) {\n                    if (newSet.get(dbQuestionText)[1][i] === option[i].value) {\n                        selectAllCorrectCounter++;\n                    }\n                }\n                if (selectAllCorrectCounter === newSet.get(dbQuestionText)[1].length) {\n                    numCorrect++;\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    parent.innerText = htmlQuestionText + \" \" + correctHex;\n                } else {\n                    parent.innerText = htmlQuestionText + \" \" + incorrectHex;\n                }\n            }\n        }\n\n        scoreArea.innerText = \"Score: \" + numCorrect + \" / \" + totalQuestions;\n    }\n\n    /**\n     * Returns an array with question types.\n     * 0 - Open Response,\n     * 1 - Multiple Choice,\n     * 2 - Select All\n     *\n     * @param {Object} questions\n     * @param {Object} options\n     * @return {Array} Resulting array with question types.\n     */\n    function declareQuestionTypes(questions, options) {\n        const questionTypesArray = new Array(Object.values(questions).length);\n        for (const questionKey in Object.values(questions)) {\n            const questionId = parseInt(Object.values(questions)[questionKey].id);\n            let count = 0;\n            for (const answerKey in Object.values(options)) {\n                const answerObject = Object.values(options)[answerKey];\n                if (parseInt(answerObject.stoodle_quiz_questionsid) === questionId && parseInt(answerObject.is_correct) === 1) {\n                    count++;\n                }\n            }\n            if (count > 1) {\n                questionTypesArray[questionKey] = 2;\n            } else if (count === 1 && parseInt(Object.values(questions)[questionKey].is_multiple_choice) === 1) {\n                questionTypesArray[questionKey] = 1;\n            } else {\n                questionTypesArray[questionKey] = 0;\n            }\n        }\n        return questionTypesArray;\n    }\n\n\n    /**\n     * Return an array of questions and answers.\n     *\n     * @param {Object} qSet\n     * @param {Object} oSet\n     * @return {Map} Resulting array\n     */\n    function createFullSet(qSet, oSet) {\n        let resultSet = new Map();\n        for (const qKey in Object.values(qSet)) {\n            let optionArray = [];\n            let answerArray = [];\n            for (const oKey in Object.values(oSet)) {\n                const dbQuestionKey = parseInt(Object.values(qSet)[qKey].id);\n                const dbOptionKey = parseInt(Object.values(oSet)[oKey].stoodle_quiz_questionsid);\n                if (dbQuestionKey === dbOptionKey) {\n                    optionArray.push(Object.values(oSet)[oKey].option_text);\n                    if (parseInt(Object.values(oSet)[oKey].is_correct) === 1) {\n                        answerArray.push(Object.values(oSet)[oKey].option_text);\n                    }\n                }\n            }\n            resultSet.set(Object.values(qSet)[qKey].question_text, [optionArray, answerArray]);\n        }\n        return resultSet;\n    }\n};\n"],"names":["_exports","init","questionSet","JSON","parse","document","getElementById","innerHTML","answerSet","questionDiv","querySelector","scoreArea","totalQuestions","Object","values","length","newSet","qSet","oSet","resultSet","Map","qKey","optionArray","answerArray","oKey","parseInt","id","stoodle_quiz_questionsid","push","option_text","is_correct","set","question_text","createFullSet","typeSet","questions","options","questionTypesArray","Array","questionKey","questionId","count","answerKey","answerObject","is_multiple_choice","declareQuestionTypes","addEventListener","numCorrect","correctHex","incorrectHex","key","dbQuestionText","htmlQuestionText","option","alert","parent","parentElement","children","value","get","window","console","log","innerText","querySelectorAll","selectAllCorrectCounter","i","questionValidation","newDiv","createElement","questionText","textContent","appendChild","createOpenResponseQuestion","element","createInputNodeRadio","createInputNodeCheckBox","name","label","textInput","cols","radio","type","createTextNode","checkbox"],"mappings":"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"}