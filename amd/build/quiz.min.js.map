{"version":3,"file":"quiz.min.js","sources":["../src/quiz.js"],"sourcesContent":["export const init = () => {\n    const questionSet = JSON.parse(document.getElementById(\"question-set\").innerHTML);\n    const answerSet = JSON.parse(document.getElementById(\"answer-set\").innerHTML);\n    const questionDiv = document.querySelector(\".js-answer-area\");\n    const scoreArea = document.querySelector(\".score\");\n    const totalQuestions = Object.values(questionSet).length;\n\n    const newSet = createFullSet(questionSet, answerSet);\n    const typeSet = declareQuestionTypes(questionSet, answerSet);\n    window.console.log(questionSet);\n    window.console.log(answerSet);\n    window.console.log([...newSet.entries()]);\n    window.console.log(typeSet);\n    window.console.log(newSet.get(\"q1\")[0][0]);\n\n    scoreArea.innerHTML = \"Score: 0 / \" + totalQuestions;\n    document.querySelector(\".submit-button\").addEventListener('click', () => {\n        questionValidation();\n    });\n\n    // Create questions and options\n    for (const key in Object.values(questionSet)) {\n        const newDiv = document.createElement(\"div\");\n        newDiv.id = \"stoodle-div\";\n        const questionText = document.createElement(\"p\");\n        questionText.id = \"stoodle-question-text\";\n        questionText.textContent = \"Question \" + (parseInt(key) + 1) + \": \" + Object.values(questionSet)[key].question_text;\n        newDiv.appendChild(questionText);\n\n        // Check if it's a multiple choice or open-response question\n        // if (parseInt(Object.values(questionSet)[key].is_multiple_choice) === 0) {\n        //     newDiv.id = \"open-response\";\n        //     createOpenResponseQuestion(newDiv, (\"option_\" + Object.values(questionSet)[key].id));\n        // } else {\n        //     newDiv.id = \"multiple-choice\";\n        //     createMultipleChoiceQuestion(newDiv, Object.values(questionSet)[key].id, answerSet);\n        // }\n        switch (typeSet[key]) {\n            default:\n            case 0:\n                newDiv.id = \"open-response\";\n                createOpenResponseQuestion(newDiv, (\"option_\" + key));\n                break;\n            case 1:\n                newDiv.id = \"multiple-choice\";\n                for (const element in newSet.get(Object.values(questionSet)[key].question_text)[0]) {\n                    const optionText = newSet.get(Object.values(questionSet)[key].question_text)[0][element];\n                    createInputNodeRadio(newDiv, (\"option_\" + key), key, optionText);\n                }\n                break;\n            case 2:\n                newDiv.id = \"select-all\";\n                for (const element in newSet.get(Object.values(questionSet)[key].question_text)[0]) {\n                    const optionText = newSet.get(Object.values(questionSet)[key].question_text)[0][element];\n                    createInputNodeCheckBox(newDiv, (\"option_\" + key), key, optionText);\n                }\n                break;\n        }\n        questionDiv.appendChild(newDiv);\n    }\n\n\n    /**\n     * Creates a multiple choice question.\n     *\n     * @param {object} parent\n     * @param {integer} questionId\n     * @param {object} answerSet\n     */\n    function createMultipleChoiceQuestion(parent, questionId, answerSet) {\n        for (const key in Object.values(answerSet)) {\n            // Match answer id to question id\n            const dbId = Object.values(answerSet)[key].stoodle_quiz_questionsid;\n            if (dbId === questionId) {\n                createInputNodeRadio(parent, (\"option_\" + questionId), (questionId), Object.values(answerSet)[key].option_text);\n            }\n        }\n    }\n\n    /**\n     * Creates a open response question.\n     *\n     * @param {object} parent\n     * @param {string} name\n     */\n    function createOpenResponseQuestion(parent, name) {\n        const label = document.createElement(\"label\");\n        const textInput = document.createElement(\"textarea\");\n        textInput.id = name;\n        textInput.cols = 100;\n        label.appendChild(textInput);\n        parent.appendChild(label);\n    }\n\n    /**\n     * Creates a radio button.\n     *\n     * @param {object} parent\n     * @param {string} id\n     * @param {string} name\n     * @param {string} value\n     */\n    function createInputNodeRadio(parent, id, name, value) {\n        // Create a radio input\n        const radio = document.createElement(\"input\");\n        radio.type = \"radio\";\n        radio.id = id;\n        radio.name = name;\n        radio.value = value;\n\n        // Create the label to go with it\n        const label = document.createElement(\"label\");\n        label.appendChild(radio);\n        label.appendChild(document.createTextNode(value));\n\n        // Append them to the parent\n        parent.appendChild(label);\n        parent.appendChild(document.createElement(\"br\"));\n    }\n\n    /**\n     * Creates a checkbox button.\n     *\n     * @param {object} parent\n     * @param {string} id\n     * @param {string} name\n     * @param {string} value\n     */\n    function createInputNodeCheckBox(parent, id, name, value) {\n        // Create a radio input\n        const checkbox = document.createElement(\"input\");\n        checkbox.type = \"checkbox\";\n        checkbox.id = id;\n        checkbox.name = name;\n        checkbox.value = value;\n\n        // Create the label to go with it\n        const label = document.createElement(\"label\");\n        label.appendChild(checkbox);\n        label.appendChild(document.createTextNode(value));\n\n        // Append them to the parent\n        parent.appendChild(label);\n        parent.appendChild(document.createElement(\"br\"));\n    }\n\n    /**\n     * Validates the questions on the quiz. Checks if right or wrong.\n     *\n     */\n    function questionValidation() {\n        let numCorrect = 0;\n\n        for (const key in Object.values(questionSet)) {\n            // const questionText = \"Question \" + (parseInt(key) + 1) + \": \" + Object.values(questionSet)[key].question_text;\n            const questionText = Object.values(questionSet)[key].question_text;\n            let option = null;\n\n            if (typeSet[key] === 0) {\n                // Check Open Response\n                option = document.getElementById(\"option_\" + key);\n                if (option.value === newSet.get(questionText)[1][0]) {\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    numCorrect++;\n                    // parent.children[0].innerText = questionText + \" \\u{274C} (manual review required)\";\n                } else {\n                    window.console.log(\"open response wrong what\");\n                }\n            } else if (typeSet[key] === 1) {\n                // Check Multiple Choice\n                option = document.querySelector('input[name = \"' + key + '\"]:checked');\n                if (newSet.get(questionText)[1][0] === option.value) {\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    numCorrect++;\n                } else {\n                    window.console.log(\"multiple choice wrong what\");\n                }\n            } else if (typeSet[key] === 2) {\n                // Check Select All\n                const thing1 = document.querySelectorAll('input[name=\"' + key + '\"]:checked');\n                let selectAllCorrectCounter = 0;\n                window.console.log(thing1);\n                if (newSet.get(questionText)[1].length !== thing1.length) {\n                    continue;\n                }\n                for (let i = 0; i < newSet.get(questionText)[1].length; i++) {\n                    if (newSet.get(questionText)[0][i] === thing1[i].value) {\n                        selectAllCorrectCounter++;\n                    } else {\n                        window.console.log(\"select all wrong what\");\n                    }\n                }\n                if (selectAllCorrectCounter === newSet.get(questionText)[1].length) {\n                    numCorrect++;\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                }\n            }\n        }\n\n        // for (const key in Object.values(questionSet)) {\n        //     const question = Object.values(questionSet)[key].id;\n        //     const parent = document.getElementById(\"option_\" + question).parentElement.parentElement;\n        //     let option = null;\n\n        //     if (parent.id === \"multiple-choice\") {\n        //         option = document.querySelector('input[name = \"' + question + '\"]:checked');\n        //     } else {\n        //         option = document.getElementById(\"option_\" + question);\n        //     }\n\n        //     if (option === null) {\n        //         alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n        //         return;\n        //     }\n\n        //     // Comparing them to the answers\n        //     for (const answerKey in Object.values(answerSet)) {\n        //         const questionText = \"Question \" + (parseInt(key) + 1) + \": \" + Object.values(questionSet)[key].question_text;\n        //         const answerText = Object.values(answerSet)[answerKey].option_text;\n        //         const answerIsCorrect = parseInt(Object.values(answerSet)[answerKey].is_correct);\n        //         if (answerText === option.value && answerIsCorrect === 1) {\n        //             window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n        //             numCorrect++;\n        //             parent.children[0].innerText = questionText + \" \\u{2705}\";\n        //             break;\n        //         } else if (answerText === option.value && answerIsCorrect === 0) {\n        //             window.console.log(\"Question \" + (parseInt(key) + 1) + \" is wrong\");\n        //             parent.children[0].innerText = questionText + \" \\u{274C}\";\n        //             break;\n        //         } else if (parent.id === \"open-response\") {\n        //             parent.children[0].innerText = questionText + \" \\u{274C} (manual review required)\";\n        //         }\n        //     }\n        // }\n\n        scoreArea.innerText = \"Score: \" + numCorrect + \" / \" + totalQuestions;\n    }\n\n    /**\n     * Validates Multiple Choice questions.\n     *\n     * @param {Object} options\n     * @param {integer} questionId\n     * @param {Object} selectedOption\n     * @return {boolean} True or false depending on if answer is correct.\n     */\n    function checkMultipleChoice(options, questionId, selectedOption) {\n        for (const key in Object.values(options)) {\n            if (Object.values(options)[key].stoodle_quiz_questionsid === questionId) {\n                if (Object.values(options)[key].option_text === selectedOption.value && Object.values(options)[key].is_correct) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns an array with question types.\n     * 0 - Open Response,\n     * 1 - Multiple Choice,\n     * 2 - Select All\n     *\n     * @param {Object} questions\n     * @param {Object} options\n     * @return {Array} Resulting array with question types.\n     */\n    function declareQuestionTypes(questions, options) {\n        const questionTypesArray = new Array(Object.values(questions).length);\n        for (const questionKey in Object.values(questions)) {\n            const questionId = parseInt(Object.values(questions)[questionKey].id);\n            let count = 0;\n            for (const answerKey in Object.values(options)) {\n                const answerObject = Object.values(options)[answerKey];\n                if (parseInt(answerObject.stoodle_quiz_questionsid) === questionId && parseInt(answerObject.is_correct) === 1) {\n                    count++;\n                }\n            }\n            if (count > 1) {\n                questionTypesArray[questionKey] = 2;\n            } else if (count === 1 && parseInt(Object.values(questions)[questionKey].is_multiple_choice) === 1) {\n                questionTypesArray[questionKey] = 1;\n            } else {\n                questionTypesArray[questionKey] = 0;\n            }\n        }\n        return questionTypesArray;\n    }\n\n\n    /**\n     * Return an array of questions and answers.\n     *\n     * @param {Object} qSet\n     * @param {Object} oSet\n     * @return {Map} Resulting array\n     */\n    function createFullSet(qSet, oSet) {\n        let resultSet = new Map();\n        for (const qKey in Object.values(qSet)) {\n            let optionArray = [];\n            let answerArray = [];\n            for (const oKey in Object.values(oSet)) {\n                if (Object.values(qSet)[qKey].question_number === Object.values(oSet)[oKey].stoodle_quiz_questionsid) {\n                    optionArray.push(Object.values(oSet)[oKey].option_text);\n                    if (parseInt(Object.values(oSet)[oKey].is_correct) === 1) {\n                        answerArray.push(Object.values(oSet)[oKey].option_text);\n                    }\n                }\n            }\n            resultSet.set(Object.values(qSet)[qKey].question_text, [optionArray, answerArray]);\n        }\n        return resultSet;\n    }\n};\n"],"names":["_exports","init","questionSet","JSON","parse","document","getElementById","innerHTML","answerSet","questionDiv","querySelector","scoreArea","totalQuestions","Object","values","length","newSet","qSet","oSet","resultSet","Map","qKey","optionArray","answerArray","oKey","question_number","stoodle_quiz_questionsid","push","option_text","parseInt","is_correct","set","question_text","createFullSet","typeSet","questions","options","questionTypesArray","Array","questionKey","questionId","id","count","answerKey","answerObject","is_multiple_choice","declareQuestionTypes","window","console","log","entries","get","addEventListener","numCorrect","key","questionText","option","value","thing1","querySelectorAll","selectAllCorrectCounter","i","innerText","questionValidation","newDiv","createElement","textContent","appendChild","createOpenResponseQuestion","element","createInputNodeRadio","createInputNodeCheckBox","parent","name","label","textInput","cols","radio","type","createTextNode","checkbox"],"mappings":"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"}