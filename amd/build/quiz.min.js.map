{"version":3,"file":"quiz.min.js","sources":["../src/quiz.js"],"sourcesContent":["export const init = () => {\n    const questionSet = JSON.parse(document.getElementById(\"question-set\").innerHTML);\n    const answerSet = JSON.parse(document.getElementById(\"answer-set\").innerHTML);\n    const questionDiv = document.querySelector(\".js-answer-area\");\n    const scoreArea = document.querySelector(\".score\");\n\n    // Organize information for easier access\n    const quizMap = createQuizHash(questionSet, answerSet);\n    const questionTypes = declareQuestionTypes(questionSet, answerSet);\n\n    scoreArea.innerHTML = \"Score: 0 / \" + quizMap.size;\n    document.querySelector(\".submit-button\").addEventListener('click', () => {\n        questionValidation();\n    });\n\n    // Create questions and answer options\n    let index = 0;\n    for (const [key, value] of quizMap.entries()) {\n        const optionArray = value[0];\n\n        // Set up div to house quiz question\n        const newDiv = document.createElement(\"div\");\n        newDiv.id = \"stoodle-div\";\n        const questionText = document.createElement(\"p\");\n        questionText.id = \"stoodle-question-text\";\n        questionText.textContent = \"Question \" + (index + 1) + \": \" + key;\n        newDiv.appendChild(questionText);\n\n        switch (questionTypes[index]) {\n            default:\n            case 0:\n                newDiv.id = \"open-response\";\n                createOpenResponseQuestion(newDiv, (\"option_\" + index));\n                break;\n            case 1:\n                newDiv.id = \"multiple-choice\";\n                for (const element in value[0]) {\n                    createInputNode(newDiv, (\"option_\" + index), index, optionArray[element], \"radio\");\n                }\n                break;\n            case 2:\n                newDiv.id = \"select-all\";\n                for (const element in value[0]) {\n                    createInputNode(newDiv, (\"option_\" + index), index, optionArray[element], \"checkbox\");\n                }\n                break;\n        }\n\n        questionDiv.appendChild(newDiv);\n        index++;\n    }\n\n    /**\n     * Creates a open response question.\n     *\n     * @param {object} parent\n     * @param {string} name\n     */\n    function createOpenResponseQuestion(parent, name) {\n        const label = document.createElement(\"label\");\n        const textInput = document.createElement(\"textarea\");\n        textInput.id = name;\n        textInput.cols = 100;\n        label.appendChild(textInput);\n        parent.appendChild(label);\n    }\n\n    /**\n     * Creates an input using a given type.\n     *\n     * @param {object} parent The node for which the new input node should be parented to.\n     * @param {string} id The id for the new input node.\n     * @param {string} name The name for the input node.\n     * @param {string} value The value for the new input node.\n     * @param {string} type The type of the new input node.\n     */\n    function createInputNode(parent, id, name, value, type) {\n        // Create a checkbox input\n        const input = document.createElement(\"input\");\n        input.type = type;\n        input.id = id;\n        input.name = name;\n        input.value = value;\n        if (type === \"radio\") {\n            input.className = \"stoodle-radio-btn\";\n        }\n\n        // Create the label to go with it\n        const label = document.createElement(\"label\");\n        label.appendChild(input);\n        label.appendChild(document.createTextNode(value));\n\n        // Append them to the parent\n        parent.appendChild(label);\n        parent.appendChild(document.createElement(\"br\"));\n    }\n\n    /**\n     * Validates the questions on the quiz. Checks if right or wrong.\n     *\n     */\n    function questionValidation() {\n        const correctIcon = \"\\u{2705}\";\n        const incorrectIcon = \"\\u{274C}\";\n        let numCorrect = 0;\n        let index = 0;\n\n        // Check selected option against answer in the map\n        for (const [key, value] of quizMap.entries()) {\n            const answerArray = value[1];\n            const htmlQuestionP = questionDiv.children[index].children[0];\n            const questionText = \"Question \" + (index + 1) + \": \" + key;\n            let finalIcon = incorrectIcon;\n\n            if (questionTypes[index] === 0) {\n                // Check Open Response\n                const option = document.getElementById(\"option_\" + index);\n                if (option.value === answerArray[0]) {\n                    numCorrect++;\n                    finalIcon = correctIcon;\n                }\n            } else if (questionTypes[index] === 1) {\n                // Check Multiple Choice\n                const option = document.querySelector('input[name= \"' + index + '\"]:checked');\n                if (option === null) {\n                    alert(\"Question \" + (index + 1) + \" is unanswered\");\n                    return;\n                }\n                if (answerArray[0] === option.value) {\n                    numCorrect++;\n                    finalIcon = correctIcon;\n                }\n            } else if (questionTypes[index] === 2) {\n                // Check Select All\n                const option = document.querySelectorAll('input[name=\"' + index + '\"]:checked');\n                if (option.length < 1) {\n                    alert(\"Question \" + (index + 1) + \" is unanswered\");\n                    return;\n                }\n                let selectAllCorrectCounter = 0;\n                for (let i = 0; i < answerArray.length && answerArray.length === option.length; i++) {\n                    if (answerArray[i] === option[i].value) {\n                        selectAllCorrectCounter++;\n                    }\n                }\n                if (selectAllCorrectCounter === answerArray.length) {\n                    numCorrect++;\n                    finalIcon = correctIcon;\n                }\n            }\n            htmlQuestionP.innerText = questionText + finalIcon;\n            index++;\n        }\n\n        scoreArea.innerText = \"Score: \" + numCorrect + \" / \" + quizMap.size;\n    }\n\n    /**\n     * Returns an array with question types.\n     * 0 - Open Response,\n     * 1 - Multiple Choice,\n     * 2 - Select All\n     *\n     * @param {Object} questions\n     * @param {Object} options\n     * @return {Array} Resulting array with question types.\n     */\n    function declareQuestionTypes(questions, options) {\n        const questionTypesArray = new Array(Object.values(questions).length);\n        for (const questionKey in Object.values(questions)) {\n            const questionId = parseInt(Object.values(questions)[questionKey].id);\n            let count = 0;\n            for (const answerKey in Object.values(options)) {\n                const answerObject = Object.values(options)[answerKey];\n                if (parseInt(answerObject.stoodle_quiz_questionsid) === questionId && parseInt(answerObject.is_correct) === 1) {\n                    count++;\n                }\n            }\n            if (count > 1) {\n                questionTypesArray[questionKey] = 2;\n            } else if (count === 1 && parseInt(Object.values(questions)[questionKey].is_multiple_choice) === 1) {\n                questionTypesArray[questionKey] = 1;\n            } else {\n                questionTypesArray[questionKey] = 0;\n            }\n        }\n        return questionTypesArray;\n    }\n\n    /**\n     * Creates a Map by matching questions to their options in their respective sets.\n     * Consists of the question text as the key, and an array containing a set of all options and a set of correct options.\n     *\n     * @param {Object} qSet Set of all questions\n     * @param {Object} oSet Set of all options\n     * @return {Map} Resulting array\n     */\n    function createQuizHash(qSet, oSet) {\n        let resultSet = new Map();\n        for (const qKey in Object.values(qSet)) {\n            let optionArray = [];\n            let answerArray = [];\n            for (const oKey in Object.values(oSet)) {\n                const dbQuestionKey = parseInt(Object.values(qSet)[qKey].id);\n                const dbOptionKey = parseInt(Object.values(oSet)[oKey].stoodle_quiz_questionsid);\n                if (dbQuestionKey === dbOptionKey) {\n                    optionArray.push(Object.values(oSet)[oKey].option_text);\n                    if (parseInt(Object.values(oSet)[oKey].is_correct) === 1) {\n                        answerArray.push(Object.values(oSet)[oKey].option_text);\n                    }\n                }\n            }\n            resultSet.set(Object.values(qSet)[qKey].question_text, [optionArray, answerArray]);\n        }\n        return resultSet;\n    }\n};\n"],"names":["questionSet","JSON","parse","document","getElementById","innerHTML","answerSet","questionDiv","querySelector","scoreArea","quizMap","qSet","oSet","resultSet","Map","qKey","Object","values","optionArray","answerArray","oKey","dbQuestionKey","parseInt","id","dbOptionKey","stoodle_quiz_questionsid","push","option_text","is_correct","set","question_text","createQuizHash","questionTypes","questions","options","questionTypesArray","Array","length","questionKey","questionId","count","answerKey","answerObject","is_multiple_choice","declareQuestionTypes","size","addEventListener","correctIcon","incorrectIcon","numCorrect","index","key","value","entries","htmlQuestionP","children","questionText","finalIcon","option","alert","querySelectorAll","selectAllCorrectCounter","i","innerText","questionValidation","newDiv","createElement","textContent","appendChild","createOpenResponseQuestion","element","createInputNode","parent","name","label","textInput","cols","type","input","className","createTextNode"],"mappings":"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"}