{"version":3,"file":"quiz.min.js","sources":["../src/quiz.js"],"sourcesContent":["export const init = () => {\n    const questionSet = JSON.parse(document.getElementById(\"question-set\").innerHTML);\n    const answerSet = JSON.parse(document.getElementById(\"answer-set\").innerHTML);\n    const questionDiv = document.querySelector(\".js-answer-area\");\n    const scoreArea = document.querySelector(\".score\");\n    const totalQuestions = Object.values(questionSet).length;\n\n    const newSet = createFullSet(questionSet, answerSet);\n    const typeSet = declareQuestionTypes(questionSet, answerSet);\n    window.console.log(questionSet);\n    window.console.log(answerSet);\n    window.console.log([...newSet.entries()]);\n    window.console.log(typeSet);\n    window.console.log(newSet.get(\"q1\")[0][0]);\n\n    scoreArea.innerHTML = \"Score: 0 / \" + totalQuestions;\n    document.querySelector(\".submit-button\").addEventListener('click', () => {\n        questionValidation();\n    });\n\n    // Create questions and options\n    for (const key in Object.values(questionSet)) {\n        const newDiv = document.createElement(\"div\");\n        newDiv.id = \"stoodle-div\";\n        const questionText = document.createElement(\"p\");\n        questionText.id = \"stoodle-question-text\";\n        questionText.textContent = \"Question \" + (parseInt(key) + 1) + \": \" + Object.values(questionSet)[key].question_text;\n        newDiv.appendChild(questionText);\n\n        // Check if it's a multiple choice or open-response question\n        if (parseInt(Object.values(questionSet)[key].is_multiple_choice) === 0) {\n            newDiv.id = \"open-response\";\n            createOpenResponseQuestion(newDiv, (\"option_\" + Object.values(questionSet)[key].id));\n        } else {\n            newDiv.id = \"multiple-choice\";\n            createMultipleChoiceQuestion(newDiv, Object.values(questionSet)[key].id, answerSet);\n        }\n        questionDiv.appendChild(newDiv);\n    }\n\n\n\n    /**\n     * Creates a multiple choice question.\n     *\n     * @param {object} parent\n     * @param {integer} questionId\n     * @param {object} answerSet\n     */\n    function createMultipleChoiceQuestion(parent, questionId, answerSet) {\n        for (const key in Object.values(answerSet)) {\n            // Match answer id to question id\n            const dbId = Object.values(answerSet)[key].stoodle_quiz_questionsid;\n            if (dbId === questionId) {\n                createInputNode(parent, (\"option_\" + questionId), (questionId), Object.values(answerSet)[key].option_text);\n            }\n        }\n    }\n\n    /**\n     * Creates a open response question.\n     *\n     * @param {object} parent\n     * @param {string} name\n     */\n    function createOpenResponseQuestion(parent, name) {\n        const label = document.createElement(\"label\");\n        const textInput = document.createElement(\"textarea\");\n        textInput.id = name;\n        textInput.cols = 100;\n        label.appendChild(textInput);\n        parent.appendChild(label);\n    }\n\n    /**\n     * Creates a multiple choice question.\n     *\n     * @param {object} parent\n     * @param {string} id\n     * @param {string} name\n     * @param {string} value\n     */\n    function createInputNode(parent, id, name, value) {\n        // Create a radio input\n        const radio = document.createElement(\"input\");\n        radio.type = \"radio\";\n        radio.id = id;\n        radio.name = name;\n        radio.value = value;\n\n        // Create the label to go with it\n        const label = document.createElement(\"label\");\n        label.appendChild(radio);\n        label.appendChild(document.createTextNode(value));\n\n        // Append them to the parent\n        parent.appendChild(label);\n        parent.appendChild(document.createElement(\"br\"));\n    }\n\n    /**\n     * Validates the questions on the quiz. Checks if right or wrong.\n     *\n     */\n    function questionValidation() {\n        let numCorrect = 0;\n        // const questionTypes = declareQuestionTypes(questionSet, answerSet);\n\n        // for (const key in Object.values(questionSet)) {\n        //     const questionText = \"Question \" + (parseInt(key) + 1) + \": \" + Object.values(questionSet)[key].question_text;\n        //     const question = Object.values(questionSet)[key].id;\n        //     let option = null;\n\n        //     if (questionTypes[key] === 0) {\n        //         option = document.getElementById(\"option_\" + question);\n        //     } else if (questionTypes[key] === 1) {\n        //         option = document.querySelector('input[name = \"' + question + '\"]:checked');\n        //         if (checkMultipleChoice(answerSet, question, option)) {\n        //             window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n        //             numCorrect++;\n        //             parent.children[0].innerText = questionText + \" \\u{2705}\";\n        //         }\n        //     }\n        // }\n\n        for (const key in Object.values(questionSet)) {\n            const question = Object.values(questionSet)[key].id;\n            const parent = document.getElementById(\"option_\" + question).parentElement.parentElement;\n            let option = null;\n\n            if (parent.id === \"multiple-choice\") {\n                option = document.querySelector('input[name = \"' + question + '\"]:checked');\n            } else {\n                option = document.getElementById(\"option_\" + question);\n            }\n\n            if (option === null) {\n                alert(\"Question \" + (parseInt(key) + 1) + \" is unanswered\");\n                return;\n            }\n\n            // Comparing them to the answers\n            for (const answerKey in Object.values(answerSet)) {\n                const questionText = \"Question \" + (parseInt(key) + 1) + \": \" + Object.values(questionSet)[key].question_text;\n                const answerText = Object.values(answerSet)[answerKey].option_text;\n                const answerIsCorrect = parseInt(Object.values(answerSet)[answerKey].is_correct);\n                if (answerText === option.value && answerIsCorrect === 1) {\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is correct\");\n                    numCorrect++;\n                    parent.children[0].innerText = questionText + \" \\u{2705}\";\n                    break;\n                } else if (answerText === option.value && answerIsCorrect === 0) {\n                    window.console.log(\"Question \" + (parseInt(key) + 1) + \" is wrong\");\n                    parent.children[0].innerText = questionText + \" \\u{274C}\";\n                    break;\n                } else if (parent.id === \"open-response\") {\n                    parent.children[0].innerText = questionText + \" \\u{274C} (manual review required)\";\n                }\n            }\n        }\n\n        scoreArea.innerText = \"Score: \" + numCorrect + \" / \" + totalQuestions;\n    }\n\n    /**\n     * Validates Multiple Choice questions.\n     *\n     * @param {Object} options\n     * @param {integer} questionId\n     * @param {Object} selectedOption\n     * @return {boolean} True or false depending on if answer is correct.\n     */\n    function checkMultipleChoice(options, questionId, selectedOption) {\n        for (const key in Object.values(options)) {\n            if (Object.values(options)[key].stoodle_quiz_questionsid === questionId) {\n                if (Object.values(options)[key].option_text === selectedOption.value && Object.values(options)[key].is_correct) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns an array with question types.\n     * 0 - Open Response,\n     * 1 - Multiple Choice,\n     * 2 - Select All\n     *\n     * @param {Object} questions\n     * @param {Object} options\n     * @return {Array} Resulting array with question types.\n     */\n    function declareQuestionTypes(questions, options) {\n        const questionTypesArray = new Array(Object.values(questions).length);\n        for (const questionKey in Object.values(questions)) {\n            const questionId = parseInt(Object.values(questions)[questionKey].id);\n            let count = 0;\n            for (const answerKey in Object.values(options)) {\n                const answerObject = Object.values(options)[answerKey];\n                if (parseInt(answerObject.stoodle_quiz_questionsid) === questionId && parseInt(answerObject.is_correct) === 1) {\n                    count++;\n                }\n            }\n            if (count > 1) {\n                questionTypesArray[questionKey] = 2;\n            } else if (count === 1 && parseInt(Object.values(questions)[questionKey].is_multiple_choice) === 1) {\n                questionTypesArray[questionKey] = 1;\n            } else {\n                questionTypesArray[questionKey] = 0;\n            }\n        }\n        return questionTypesArray;\n    }\n\n\n    /**\n     * Return an array of questions and answers.\n     *\n     * @param {Object} qSet\n     * @param {Object} oSet\n     * @return {Map} Resulting array\n     */\n    function createFullSet(qSet, oSet) {\n        let resultSet = new Map();\n        for (const qKey in Object.values(qSet)) {\n            let optionArray = [];\n            let answerArray = [];\n            for (const oKey in Object.values(oSet)) {\n                if (Object.values(qSet)[qKey].question_number === Object.values(oSet)[oKey].stoodle_quiz_questionsid) {\n                    optionArray.push(Object.values(oSet)[oKey].option_text);\n                    if (parseInt(Object.values(oSet)[oKey].is_correct) === 1) {\n                        answerArray.push(Object.values(oSet)[oKey].option_text);\n                    }\n                }\n            }\n            resultSet.set(Object.values(qSet)[qKey].question_text, [optionArray, answerArray]);\n        }\n        return resultSet;\n    }\n};\n"],"names":["_exports","init","questionSet","JSON","parse","document","getElementById","innerHTML","answerSet","questionDiv","querySelector","scoreArea","totalQuestions","Object","values","length","newSet","qSet","oSet","resultSet","Map","qKey","optionArray","answerArray","oKey","question_number","stoodle_quiz_questionsid","push","option_text","parseInt","is_correct","set","question_text","createFullSet","typeSet","questions","options","questionTypesArray","Array","questionKey","questionId","id","count","answerKey","answerObject","is_multiple_choice","declareQuestionTypes","window","console","log","entries","get","addEventListener","numCorrect","key","question","parent","parentElement","option","alert","questionText","answerText","answerIsCorrect","value","children","innerText","questionValidation","newDiv","createElement","textContent","appendChild","createOpenResponseQuestion","createMultipleChoiceQuestion","createInputNode","name","label","textInput","cols","radio","type","createTextNode"],"mappings":"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"}